using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Net;
using System.IO;
using System.Runtime.Serialization.Json;
using System.Diagnostics;
using System.Collections.ObjectModel;

namespace TestTask1
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        const string IdentifierUrlPattern = "http://tmgwebtest.azurewebsites.net/api/textstrings/";
        const string ApiKey = "0J/RgNC40LLQtdGC0LjQutC4IQ==";
        public ObservableCollection<IdentifierInfo> source { get; set; } = new ObservableCollection<IdentifierInfo>();

        public MainWindow()
        {
            InitializeComponent();
            DataContext = this;
            dataTable.AutoGeneratedColumns += DataTable_AutoGeneratedColumns;
        }

        private void DataTable_AutoGeneratedColumns(object sender, EventArgs e)
        {
            dataTable.Columns[0].Header = "Идентификатор";
            dataTable.Columns[1].Header = "Текст";
            dataTable.Columns[2].Header = "Кол-во слов";
            dataTable.Columns[3].Header = "Кол-во гласных";

            Style style = new Style(typeof(DataGridCell));
            style.Setters.Add(new Setter(DataGridCell.ContentTemplateProperty, Resources["templ"]));
            dataTable.Columns[1].CellStyle = style;
            dataTable.Columns[1].Width = new DataGridLength(120);
        }

        private void calculateButton_Click(object sender, RoutedEventArgs e)
        {
            ProcessIdentifiers();
        }
        private void ProcessIdentifiers()
        {
            string[] strIdentifiers = stringIdentifiersBox.Text.Trim().Replace(" ", "").Split(',', ';').Distinct().ToArray();
            List<IdentifierInfo> identifiers = new List<IdentifierInfo>();
            foreach (var str in strIdentifiers)
            {
                if (int.TryParse(str, out int num) && num >= 1 && num <= 20)
                {
                    identifiers.Add(new IdentifierInfo(num));
                }
            }
            FillIdentifiersFromServer(identifiers);
        }
        private void FillIdentifiersFromServer(IEnumerable<IdentifierInfo> identifiers)
        {
            using (WebClient wc = new WebClient())
            {
                wc.Headers.Add("TMG-Api-Key", ApiKey);
                foreach (var item in identifiers)
                {
                    try
                    {
                        var json = wc.DownloadData($"{IdentifierUrlPattern}{item.ID}");
                        item.Text = Deserialize<IdentifierText>(json).text;
                    }catch(WebException e)
                    {
                        Debug.WriteLine(((HttpWebResponse)e.Response).StatusCode);
                        continue;
                    }
                }
            }
            FillTable(identifiers);
        }

        //Fills a data grid
        private void FillTable(IEnumerable<IdentifierInfo> identifiers)
        {
            source.Clear();
            foreach (var item in identifiers)
                source.Add(item);
        }

        //Json deserializer from bytes
        public static T Deserialize<T>(byte[] jsonRaw)
        {
            using (MemoryStream ms = new MemoryStream(jsonRaw))
            {
                DataContractJsonSerializer jsonDerializer = new DataContractJsonSerializer(typeof(T));
                return (T)jsonDerializer.ReadObject(ms);
            }
        }
    }
}
